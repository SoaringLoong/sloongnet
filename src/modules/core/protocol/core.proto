// Protobuf for Core Module
// If other module is develop by C/C++, and want base on Core module, use this protocol
syntax = "proto3";
package Core;


// LogLevel
enum LogLevel{
    All = 0;
    Verbos = 1;
    Debug = 2;
    Info = 3;
    Warn = 4;
    Err = 5;
    Assert = 6;
    Fatal = 7;  
}

enum DATA_ITEM
{
    Invalid=0;
    ServerConfiguation=1;
	ModuleConfiguation=2;
	Logger=3;
	RuntimeData=4;
    ReferenceTemplateInfo=5;

    CustomMix=100;
}

enum MODULE_TYPE
{
    Manager=0;
    AuthCenter=1;
    DataCenter=2;
    FileCenter=3;
    Firewall=4;
    Gateway=5;
    Processer=6;
}

enum EVENT_TYPE
{
    InvalidEventType=0;
    //////////////////////////////////////////////////////////////////////////
	// 由 * Application * 主程序提供的消息 (1-10)
	//////////////////////////////////////////////////////////////////////////
	// 程序准备完毕可以运行时发送
	ProgramStart=1;

    // 程序需要退出时发送
    ProgramStop=2;

	// 重新启动。程序将会从加载开始，重新执行获取配置，加载模块等操作
	ProgramRestart=3;

    // 发送请求到Manager服务
    SendPackageToManager=4;


	//////////////////////////////////////////////////////////////////////////
	// 由 * NetworkHub * 模块提供的消息 (11-20)
	//////////////////////////////////////////////////////////////////////////
    // 需要发送数据给客户端时，使用该消息
    // 参数类型为SendPackageEvent
	SendPackage=11;

	// 当连接关闭时会发送该消息
	// 参数类型为ConnectionBreakedEvent
	ConnectionBreaked=12;
    
    // 主动关闭连接
    // 参数类型为BreadConnectionEvent
    BreadConnection=13;

	// 需要监听socket的可写状态时，使用该消息
	// 类型类型为MonitorSendStatusEvent.
	MonitorSendStatus=14;

	// 配置网络中心的功能
    // 参数类型为NetworkHubFunctionConfigEvent
	NetworkHubFunctionConfig=15;

    // 注册一个已经存在的连接到EPOLL
    // 参数类型为RegisteConnectionEvent
    RegisteConnection=16;

    // 获取一个连接的信息
    // 参数类型为GetConnectionInfoEvent
    GetConnectionInfo=18;

    //////////////////////////////////////////////////////////////////////////
	// 由 * 其他模块 * 模块提供的自定义消息 (>100)
	//////////////////////////////////////////////////////////////////////////
    CustomEventMix=100;
}

enum ControlEvent{
    InvalidEvent=0;
    Restart=1;
    Stop=2;
}

message GLOBAL_CONFIG
{
    // Network 
    string  ListenAddress = 1;
    int32   ListenPort = 2;

    // Log 
    string  LogPath = 3;
    LogLevel   LogLevel =4 ;
    int32    LogOperation = 5;

    // Performance
    int32   MQThreadQuantity =6;// Message queue work thread quantity 
    int32   EPollThreadQuantity=7;// EPoll event process thread quantity
    int32   ProcessThreadQuantity=8;// work thread for DataPackage process quantity
    int32   PrioritySize=9;// Priority Size for the list. the priority level cannot bigger than this value.

    // Timeout
    int32   ConnectTime=10;
    int32   ReceiveTime=11;

    // Module
    string  ModuleName = 12;
    MODULE_TYPE ModuleType = 13;
    string  ModulePath = 14;
    bytes   ModuleConfig = 15;
    // 引用的其他模板，即本节点可能由数据流向引用节点，并且在目标模板节点产生变动的时候会通知引用者。
    string  ModuleReference = 16;
    // 模板提供的功能，可以是多种形式：单功能，功能区（xx-xx），全功能（*）。各种形式之间使用逗号分隔
    string  ModuleFunctoins = 17;

    // SSL
    bool    EnableSSL=18;
    string  CertFilePath=19;
    string  KeyFilePath=20;
    string  CertPasswd=21;

};

message RuntimeDataPackage
{
    string ManagerAddress=1;
	int32 ManagerPort=2;
	int32 TemplateID=3;
    fixed64 NodeUUID=4;
	GLOBAL_CONFIG TemplateConfig=5;
}
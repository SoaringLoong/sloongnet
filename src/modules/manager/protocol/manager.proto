syntax = "proto3";
import "base.proto";
import "core.proto";
package Manager;

enum Events{
   Invalid=0;
   reserved 1 to 9; // This is reserved for core 
   ReferenceModuleOnline=10;
   ReferenceModuleOffline=11;
}

message EventReferenceModuleOnline{
   NodeItem item=1;
}

message EventReferenceModuleOffline{
   fixed64 uuid=1;
}

enum Functions{
    ManagerInvalidFunction=0;
    
    //
    // Request:PostLogMessageRequest
    // Response:Result
    PostLog=1;

    // When worker start, send this request to registe a worker, and wait manage assigning template.
    // Request: RegisteWorkerRequest * In defualt no should set, just send request with empty content.
    // Response: Result    -> Succeed      RegisteWorkerMessageResponse
    //                     -> Retry        Wait assign, wait some time and retry again.
    RegisteWorker=2;
    
    // When assigning tamplate, and node is ready to work, send this requst.
    // Request : RegisteNodeRequest
    // Response: Result
    RegisteNode=3;

    //
    // Request:AddTemplateRequest
    // Response: Result
    AddTemplate=4;

    // Request:DeleteTemplateRequest
    // Response: Result
    DeleteTemplate=5;

    // Request :SetTemplateRequest
    // Response: Result
    SetTemplate =6;

    // Request:QueryTemplateRequest
    // Response:QueryTemplateResponse
    QueryTemplate=7;
    
    // Request: None
    // Response: QueryReferenceInfoResponse
    QueryReferenceInfo=8;

    // Request:QueryNodeRequest
    // Response:QueryNodeResponse
    QueryNode=9;

    // Request:RestartNodeRequest
    // Response:Result
    RestartNode=10;
    
    // Request:StopNodeRequest
    // Response:Result
    StopNode=11;

    // Request: ReportLoadStatusRequest
    // Response: None
    ReportLoadStatus=12;

    // reserved for other service.
    reserved 101 to max;
}

message PostLogMessageRequest
{
   enum PostLogType
   {
      Request=0;
      Response=1;
   }
   PostLogType Type=1;// Request or Response
   Base.ResultType Result=2;// Succeed or Error
   string Sender=3;// Message sender
   string Receiver=4;// Message receiver
   string Function=5;
   int32 Time=6;// Current time
   bytes Content =7;// For succeed is message content; For other is message
}

message RegisteWorkerRequest
{
   // In defualt no should set, just send request with empty content.
   // Just ues this when a worker node is for specified template.
   enum RunType
   {
      Default=0;
      AssignTemplate=1;
      IncludeType=2;
      ExcludeType=3;
   };
   RunType RunMode = 1;
   repeated int32 AssignTargetTemplateID=2;
   repeated Core.MODULE_TYPE IncludeTargetType=3;
   repeated Core.MODULE_TYPE ExcludeTargetType=4;
}

message RegisteWorkerResponse
{
   int32 TemplateID=1;
   bytes Configuation=2;
}

message RegisteNodeRequest{
   int32 TemplateID=1;
}

message ReferenceTemplateInfo
{
   int32 TemplateID=1;
   Core.MODULE_TYPE Type=2;
   string ProvideFunctions=3;
   repeated NodeItem NodeInfos=4;
}

message QueryReferenceInfoResponse{
   repeated ReferenceTemplateInfo TemplateInfos=1;
}

message AddTemplateRequest{
   TemplateItem AddInfo=1;
}
message DeleteTemplateRequest{
   int32 TemplateID=1;
}
message SetTemplateRequest{
   TemplateItem SetInfo=1;
}

// Query template info by ID or type.
message QueryTemplateRequest{
   repeated int32 TemplateID=1;
   repeated int32 TemplateType=2;
   bool QueryAll=3;
}

message StopNodeRequest{
   fixed64 NodeID=1;
}

message RestartNodeRequest{
   fixed64 NodeID=1;
}

message TemplateItem{
   int32 ID=1;
   string Name=2;
   string Note=3;
   int32 Replicas=4;
   int32 Created=5;
   bytes Configuation=6;
}
message QueryTemplateResponse{
   repeated TemplateItem TemplateInfos=1;
}

message QueryNodeRequest
{
   repeated int32 TemplateID=1;
}

message NodeItem{
   fixed64 UUID=1;
   string TemplateName=2;
   int32 TemplateID=3;
   string Address = 4;
   int32 Port=5;
   string ActiveTime=6;
}

message QueryNodeResponse
{
   repeated NodeItem NodeInfos=1;
}


message ReportLoadStatusRequest{
   double CPULoad=1;
   double MemroyUsed=3;
   double NetworkIn=5;
   double NetworkOut=6;
}